[environment]
mode = "dev"
data_path = "data"
repository = "bridge.dev"

[relayer_blockchain]
    # Allfet local node
    [relayer_blockchain.ChainId440]
    rpc_url = "{{ RPC_URL_440 }}"
    project_id = "{{ PROJECT_ID_440 }}"
    pk = "{{ PK_440 }}"
    wait_block_validation = 6
    block_validation_second_per_block = 5
    smart_contract_address = "{{ SMART_CONTRACT_ADDRESS_440 }}"
    smart_contract_deployment_block = "{{ SMART_CONTRACT_DEPLOYMENT_BLOCK_440 }}"
    client = ""

    # GETH node
    [relayer_blockchain.ChainId1337]
    rpc_url = "{{ RPC_URL_1337 }}"
    project_id = "{{ PROJECT_ID_1337 }}"
    pk = "{{ PK_1337 }}"
    wait_block_validation = 6
    block_validation_second_per_block = 12
    smart_contract_address = "{{ SMART_CONTRACT_ADDRESS_1337 }}"
    smart_contract_deployment_block = "{{ SMART_CONTRACT_DEPLOYMENT_BLOCK_1337 }}"
    client = "middleware"

[relayer_register]
# RabbitMQ Broker
host = "{{ RELAYER_REGISTER_HOST }}"
port = "{{ RELAYER_REGISTER_PORT }}"
user = "{{ RELAYER_REGISTER_USER }}"
password = "{{ RELAYER_REGISTER_PASSWORD }}"
queue_name = "{{ RELAYER_REGISTER_QUEUE_NAME }}"

[relayer_event_rules]
    [relayer_event_rules.OperationCreated]
    origin = "chainIdFrom"
    has_block_finality = true
    chain_func_name = 'chainIdTo'
    func_name = "sendFeesLockConfirmation"
    depends_on = 'FeesDeposited'

    [relayer_event_rules.FeesDeposited]
    origin = "chainIdTo"
    has_block_finality = true
    chain_func_name = 'chainIdTo'
    func_name = "sendFeesLockConfirmation"
    depends_on = 'OperationCreated'

    [relayer_event_rules.FeesDepositConfirmed]
    origin = "chainIdTo"
    has_block_finality = false
    chain_func_name = 'chainIdFrom'
    func_name = "receiveFeesLockConfirmation"

    [relayer_event_rules.FeesLockedConfirmed]
    origin = "chainIdFrom"
    has_block_finality = false
    chain_func_name = 'chainIdFrom'
    func_name = "confirmFeesLockedAndDepositConfirmed"

    [relayer_event_rules.FeesLockedAndDepositConfirmed]
    origin = "chainIdFrom"
    has_block_finality = false
    chain_func_name = 'chainIdTo'
    func_name = "completeOperation"

    [relayer_event_rules.OperationFinalized]
    origin = "chainIdTo"
    has_block_finality = false
    chain_func_name = 'chainIdFrom'
    func_name = "receivedFinalizedOperation"
