[environment]
mode = "prod"
data_path = "data"
repository = "bridge.prod"

[relayer_blockchain]
  # Allfeat tesnet 
  [relayer_blockchain.ChainId441]
  rpc_url = "{{ RPC_URL_441 }}"
  project_id = "{{ PROJECT_ID_441 }}"
  pk = "{{ PK_441 }}"
  wait_block_validation = 6
  block_validation_second_per_block = 5
  smart_contract_address = "{{ SMART_CONTRACT_ADDRESS_441 }}"
  smart_contract_deployment_block = "{{ SMART_CONTRACT_DEPLOYMENT_BLOCK_441 }}"
  client = ""

  # Sepolia
  [relayer_blockchain.ChainId11155111]
  rpc_url = "{{ RPC_URL_11155111 }}"
  project_id = "{{ PROJECT_ID_11155111 }}"
  pk = "{{ PK_11155111 }}"
  wait_block_validation = 6
  block_validation_second_per_block = 12
  smart_contract_address = "{{ SMART_CONTRACT_ADDRESS_11155111 }}"
  smart_contract_deployment_block = "{{ SMART_CONTRACT_DEPLOYMENT_BLOCK_11155111 }}"
  client = "middleware"


[relayer_register]
# RabbitMQ Broker
host = "{{ RELAYER_REGISTER_HOST }}"
port = "{{ RELAYER_REGISTER_PORT }}"
user = "{{ RELAYER_REGISTER_USER }}"
password = "{{ RELAYER_REGISTER_PASSWORD }}"
queue_name = "{{ RELAYER_REGISTER_QUEUE_NAME }}"

[relayer_event_rules]
    [relayer_event_rules.OperationCreated]
    origin = "chainIdFrom"
    has_block_finality = true
    chain_func_name = 'chainIdTo'
    func_name = "sendFeesLockConfirmation"
    depends_on = 'FeesDeposited'

    [relayer_event_rules.FeesDeposited]
    origin = "chainIdTo"
    has_block_finality = true
    chain_func_name = 'chainIdTo'
    func_name = "sendFeesLockConfirmation"
    depends_on = 'OperationCreated'

    [relayer_event_rules.FeesDepositConfirmed]
    origin = "chainIdTo"
    has_block_finality = false
    chain_func_name = 'chainIdFrom'
    func_name = "receiveFeesLockConfirmation"

    [relayer_event_rules.FeesLockedConfirmed]
    origin = "chainIdFrom"
    has_block_finality = false
    chain_func_name = 'chainIdFrom'
    func_name = "confirmFeesLockedAndDepositConfirmed"

    [relayer_event_rules.FeesLockedAndDepositConfirmed]
    origin = "chainIdFrom"
    has_block_finality = false
    chain_func_name = 'chainIdTo'
    func_name = "completeOperation"

    [relayer_event_rules.OperationFinalized]
    origin = "chainIdTo"
    has_block_finality = false
    chain_func_name = 'chainIdFrom'
    func_name = "receivedFinalizedOperation"
